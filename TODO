WARNING: parts of this document could be outdated (2009-12-24)

=================================================================================================
        -- release checks --
=================================================================================================

 - does doxygen complain about undocumented classes/functions?
 - does every file have a proper copyright notice?
 - check code for BUG string and fix those for (have a look at FIXME and WARNING as well)

=================================================================================================
        -- important FIXMES --
=================================================================================================

 - GraphicsScene.cpp
  //FIXME qt 4.4.x and 4.3.x have a bug in the BspTreeIndex methods -> removeItem(QGraphicsItem)
  //      since in some cases an already deleted item is queried which segfaults the program
  //      POSSIBLE CAUSE: maybe this isn't a bug in qt BUT in my QGraphicsItem implementation's
  //      boundingBox on item resize, have to track that done yet.
  //      FINAL SOLUTION: found it, it was my own SceneItem_Connection item's wrong dimension
  // //   QRectF SceneItem_Connection::boundingRect() const {
  // //   QRectF z = QRectF(-2000,-2000,4000,4000);
  // //   return z;
  //      finally showed that with that dimension it would never crash -> now i have to fix that...

 - GraphicsView: items currently query the scene for the model
   FIX: every item should have direct access to the model with model()

    % grep -e "class.*:" src/SceneItem_*
      src/SceneItem_Connection.h:class SceneItem_Connection : public QGraphicsItem {
      src/SceneItem_ConnectionHandle.h:class SceneItem_ConnectionHandle : public QObject, public QGraphicsItem {
      src/SceneItem_LabelEditor.h:class SceneItem_LabelEditor : public QGraphicsTextItem {
      src/SceneItem_Node.h:class SceneItem_Node : public QGraphicsItem {

 - nodes IDs and node_connection IDs should be unique? right now there can be cases where:
   NODE::ID=1 and NODE_CONNECTION::ID=1 are the same (tested) but [todo] is this wanted?

 - check all casts for static_cast and dynamic_cast
 - usability in TreeView: needs a mouse, no keyboard navigation possible which is bad

 - adding a GraphicsView using the automatehandler on automates which have connections (excluding loops)
   will trigger a loop which will eat up all memory and crash the system here -> see SceneItem_ConnectionHandle::paint()

 - GraphicsView: if two nodes with no connections are visualized, then the bug can be triggered by:
   1. create a connection with MMB over one node (hold the MMB) and drag it to the other node
   2. a new connection is added (this is not the bug)
   3. now the source node is selected - (bug) since i don't know why yet

 - items which are added via a GraphicsView (using two GraphicsViews attached to the same automate)
   will (as expected) add the node at the same respecitve position. say x=204,y=250 on both views.
   however: if a node is moved only the first view will update the new position correctly, the second
   view will not see this since it is not done using 'setData and dataChanged()' via the model yet

 - ~Automate should remove all data structures associated with a automate instance like:
  - all views (as well as all objects in the views as for instance a SceneItem_Node) and the model
  - all data which 'could' be destructed by ~AutomateRoot

FIXME qt bug report schreiben
  Re: [Issue N218633] http://trolltech.com/developer/task-tracker/index_html?method=entry&id=78949

=================================================================================================
        -- not in the scope of this work --
=================================================================================================

FIXME Model.cpp/GraphicsScene.cpp right now adds a new connection as a loop, afterwards the loop
      can be changed to a outgoing connection. the idea was that the automate is always well formed:
        no links to dead objects
      but this adds some overhead. this situation can be handled better:
      just add a dead object which every new connection is linked to. now we can distinguish
      between new object and loop again and we don't have any overhead.
FIXME SceneItem_Node, SceneItem_ConnectionHandle
      on very long labels we could adjust the boundingRect() with the rendered text width/height
      right now text is croped until the scene is completely redrawn most of the time the label
      will be cut and this looks buggy
FIXME graphicsView: implement layoutChanged()
      traverse all QPersistentModelIndex: if valid leave if not remove them, add new ones as well
FIXME treeView, adding a new connection isn't marked with a '+' sign in the treeView node line!
      HINT: check the row/column in dataChanged() call, maybe this is the fix?!
      HINT: maybe implement hasChildren as well
      HINT: if layouChanged() is used, it works BUT this is not good since it should work without!
      HINT: it's working for removeRows however AND once '+' was clicked (meaning the item should expand)
            it will be working when the item is removed and after no child is there anymore again an item is added
            it will stop working again when you hit the '-' and try delete all + add one item again
            - the view will update correctly if the widget is clicked anywhere?! why?
      HINT: http://lists.trolltech.com/qt-interest/2007-06/thread00580-0.html
      SOLUTION:
      this is definitly a Qt bug which is either here again by regression or by intention
      http://trolltech.com/developer/task-tracker/index_html?method=entry&id=78949
      i can reproduce it with qt 4.3.3 and qt 4.4.0 -> [2] was taken with qt 4.4.0
      with some help of irc.kde.org#qt from kibab i've made a hack* to make it
      working as intended:

      ================ modified qtreeview.cpp ==================
          if (parent != d->root /*&& !d->isIndexExpanded(parent)*/) {
              QAbstractItemView::rowsInserted(parent, start, end);
      //         return;
      }
      ================ modified qtreeview.cpp ==================

      ================ UNmodified qtreeview.cpp ==================
          if (parent != d->root && !d->isIndexExpanded(parent)) {
              QAbstractItemView::rowsInserted(parent, start, end);
              return;
      }
      ================ UNmodified qtreeview.cpp ==================
      now recompile qt and install it...
      (this fix is not complete and triggers other bugs....)

      the funny thing is that the problem is for insertRows and using qt 4.2.3
      (x==one of the releases) the problem was inverted since insertRows would work
      there but removeRows didn't remove the + sign there.

      [3] seems to cover the same issue

      have fun!

      * i expect some performance penalty and maybe other things as well. please
      check

      [1]
      http://trolltech.com/developer/task-tracker/index_html?method=entry&id=78949
      [2] http://www.lastlog.de/misc/drawing_problem.ogg
      [3] http://lists.trolltech.com/qt-interest/2007-06/thread00580-0.html
FIXME labelEditor could be impoved by selecting all text on edit
FIXME when in labelItemEditor mode one can invoke drawing a red line with MMB on the text (instead of Xserver-paste)
FIXME graphicsView: 'even' amount node_connections should be centered, 'odd' amounts are already rendered as intended
FIXME zoomFit
  - andreas krebs wanted to do that, nearly everything is there now, see
    void mainGraphicsView::zoomFit() { in mainGraphicsView.cpp
FIXME graphicsitem
  - remove trembling when moving an connectionLabel -> FIXED in qt 4.4
FIXME treeView flags should only be editable if editable!
  right now it's just ignoring edits which don't affect anything
FIXME add symbol editor featuring a QStringList model
FIXME label needs caching inside a node/connection since each redraw triggers a model query
FIXME if connectionLabel is moved between two nodes it's resizing on node move is correct
    BUT if the connectionLabel is moved beyond on node it's resizing is done into the wrong direction
    -> while the distance between the nodes shrinks the object moves even farer away
FIXME moving two nodes in a way they will overlap should be handled better: connection drawing is disabled then!
  - also fix object initialisation of a connection
    because two overlapping connectionLabels should be drawn RED!
FIXME use parentWidget() and parent where possible
FIXME nodes should appear under mouse cursor not randomly if added from the GraphicsView
      fix it here: QGraphicsItem* GraphicsScene::nodeInserted( QPersistentModelIndex item ) {
FIXME ICONS for ACTIONS:
  - enable/disable opengl rendering
FIXME GraphicsScene: replace keyPressEvent code with QShortCut/QAction

graphicsView:
 - grid
  - show/hide grid
  - enable/disable grid magnification
  - inc/dec grid spacing
 - implement 'flow' -> this feature will move overlapping nodes away from each and
                       it does so for connection labels as well
 - add rotation handle

  misc:
  add this to the documentaiton for futher reading
 - http://www.graphviz.org/doc/libguide/libguide.pdf
 - http://www.boost.org/doc/libs/1_35_0/libs/graph/doc/index.html
 - http://www.graphviz.org/
 - http://www.boost.org/libs/graph/doc/fruchterman_reingold.html

todo
      LMB                     -> select node/connection
      LMB drag                -> bbox for selecting objects
      MMB on nodes            -> connect them
x     MMB on empty space      -> move view
      RMB on node/connection  -> context menu
      RMB on scene            -> ??????????????

general:
 - add 'invert all connections' to automate_algorithms
 - re-merge automate_algorithms to trunk
 - getAutomateType
   create a better detection of automate type
 - checkWord
   iterative word check implementation for eNFA/NFA/DFA
 - think about if automate/meta_automate need a
   copy constructor ... -> rule of three
   - copy an automate 1:1

FIXME
items which have to be editable:
                            treeView    graphicsview
 - start                    editable    editable
 - final                    editable    editable
 - next_node                editable    visible,no editor yet
 - new connections          editable    editable
 - new nodes                editable    works well now
 - deletable nodes          editable    editable
 - deletable conns.         editable    editable
 - multiple selection       editable    editable
 - node label rename        editable    -
 - connection label ren     editable    -
 - connection symbol        editable    -
 - move nodes/labels        sorting     mouse drag
 - ctrl+LMB add single      -           editable
   node to a selection
 - ctrl+LMB add single      -           editable
   conn. to a selection     -           -
 - select a single node
   \ by boundingbox         -           editable
   \ by click               editable    editable
 - select a single conn.
   \ by boundingbox         -           editable
   \ by click               editable    -
 - reconnect on the fly     editable    -
  (in the graphicsView we need a handle for this)
